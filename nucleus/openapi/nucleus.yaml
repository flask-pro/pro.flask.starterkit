openapi: 3.0.1
info:
  title: pro.flask.starterkit API
  description: Template for API by pro.flask.starterkit.
  version: 0.0.1
servers:
  - url: 'https://api.flask.pro'
tags:
  - name: auth
    description: Autorization and autentication.
  - name: users
    description: Manage users.
  - name: files
    description: Manage files.
paths:
  /signup:
    post:
      tags:
        - auth
      summary: Registration in system
      operationId: nucleus.views.auth.signup
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Signup"
  /login:
    post:
      tags:
        - auth
      summary: Return secret string
      operationId: nucleus.views.auth.login
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
      security:
        - basic: []
  /profile:
    get:
      tags:
        - auth
      summary: Return user profile
      operationId: nucleus.views.auth.profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - jwt: []
  /renew:
    put:
      tags:
        - auth
      summary: Return new secret string
      operationId: nucleus.views.auth.renew
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
      security:
        - jwt: []
  /users:
    get:
      tags:
        - users
      operationId: nucleus.views.users.get_users_list
      summary: Returns a list of users
      parameters:
        - $ref: "#/components/parameters/include_metadata"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersList"
      security:
        - jwt: []
    post:
      tags:
        - users
      operationId: nucleus.views.users.create_user
      summary: Create user
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserNew"
        required: true
      security:
        - jwt: []
  /users/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - users
      operationId: nucleus.views.users.get_user
      summary: Get user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - jwt: []
    put:
      tags:
        - users
      operationId: nucleus.views.users.update_user
      summary: Update user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      security:
        - jwt: []
    delete:
      tags:
        - users
      operationId: nucleus.views.users.delete_user
      summary: Delete user
      responses:
        '204':
          description: OK
      security:
        - jwt: []
  /roles:
    get:
      tags:
        - users
      operationId: nucleus.views.users.get_roles_list
      summary: Returns a list of roles
      parameters:
        - $ref: "#/components/parameters/include_metadata"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RolesList"
      security:
        - jwt: []
    post:
      tags:
        - users
      operationId: nucleus.views.users.create_role
      summary: Create role
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleNew"
        required: true
      security:
        - jwt: []
  /roles/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - users
      operationId: nucleus.views.users.get_role
      summary: Get role
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
      security:
        - jwt: []
    put:
      tags:
        - users
      operationId: nucleus.views.users.update_role
      summary: Update role
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      security:
        - jwt: []
    delete:
      tags:
        - users
      operationId: nucleus.views.users.delete_role
      summary: Delete role
      responses:
        '204':
          description: OK
      security:
        - jwt: []
  /files:
    get:
      tags:
        - files
      summary: Returns a list of files
      operationId: nucleus.views.files.file_list
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/include_metadata"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesList"
    post:
      tags:
        - files
      operationId: nucleus.views.files.upload_file
      summary: Upload files
      security:
        - jwt: []
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        description: File to upload to the server.
  /files/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - files
      summary: Getting information about a file.
      operationId: nucleus.views.files.get_file
      security:
        - jwt: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
    delete:
      tags:
        - files
      operationId: nucleus.views.files.delete_file
      summary: Deleting a file
      security:
        - jwt: []
      responses:
        "204":
          description: OK
  /files/download/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - files
      summary: Download a file
      operationId: nucleus.views.files.download_file
      security:
        - jwt: []
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: string
                format: binary
components:
  parameters:
    include_metadata:
      in: query
      name: include_metadata
      description: Include metadata object to response
      schema:
        type: boolean
        example: true
    page:
      in: query
      name: page
      description: Page number
      schema:
        type: integer
        minimum: 1
        example: 1
    per_page:
      in: query
      name: per_page
      description: Number of records per page
      schema:
        type: integer
        example: 30
        minimum: 1
        maximum: 100
    id:
      name: id
      in: path
      description: Object id.
      required: true
      schema:
        type: integer
        minimum: 1
        example: 1
  schemas:
    ID:
      type: integer
      minimum: 1
      maximum: 10000000000
      example: 1
      description: "ID object in system."
    Token:
      type: object
      required:
        - access_token
        - refresh_token
      additionalProperties: false
      properties:
        access_token:
          type: string
          example: "token"
        refresh_token:
          type: string
          example: "token"
    Signup:
      type: object
      required:
        - username
        - password
      additionalProperties: false
      properties:
        username:
          type: string
          example: "user"
        password:
          type: string
          example: "secret"
    UserNew:
      type: object
      required:
        - username
        - password
        - role
      additionalProperties: false
      properties:
        username:
          type: string
          example: "user"
        password:
          type: string
          example: "secret"
        role:
          type: string
          example: "user"
    User:
      type: object
      required:
        - id
        - username
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        username:
          type: string
          example: "user"
    UsersList:
      type: object
      required:
        - items
      properties:
        _metadata:
          $ref: '#/components/schemas/Metadata'
        items:
          type: array
          items:
            $ref: "#/components/schemas/User"
    RoleNew:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        name:
          type: string
          example: "user"
        description:
          type: string
          example: "user"
    Role:
      type: object
      required:
        - id
        - name
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
          example: "user"
        description:
          type: string
          example: "user"
    RolesList:
      type: object
      required:
        - items
      properties:
        _metadata:
          $ref: '#/components/schemas/Metadata'
        items:
          type: array
          items:
            $ref: "#/components/schemas/Role"
    File:
      type: object
      required:
        - id
        - name
        - length
        - mime_type
        - url
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
          format: path
          example: image.png
          description: "File name"
        length:
          type: number
          format: int
          example: 1024
          description: "File size in bytes."
        mime_type:
          type: string
          example: image/png
          description: "MIME type"
        url:
          type: string
          example: 'https://example.com/v1/files/download/12345'
          description: "Link to download the file."
    FilesList:
      type: object
      required:
        - items
      properties:
        _metadata:
          $ref: "#/components/schemas/Metadata"
        items:
          type: array
          items:
            $ref: "#/components/schemas/File"
    Pagination:
      type: object
      required:
        - page
        - per_page
        - pages
        - items
      properties:
        page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 30
        pages:
          type: integer
          example: 1
        items:
          type: integer
          example: 1
    Metadata:
      type: object
      required:
        - pagination
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
  securitySchemes:
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: nucleus.views.auth.basic_auth
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: nucleus.views.auth.decode_token
