openapi: 3.0.3
info:
  title: pro.flask.starterkit API
  description: Template for API by pro.flask.starterkit.
  version: 0.0.1
servers:
  - url: 'https://api.flask.pro'
tags:
  - name: auth
    description: Autorization and autentication.
  - name: accounts
    description: Manage user account.
  - name: users
    description: Manage users.
  - name: directories
    description: Manage global directories.
  - name: profiles
    description: Manage profiles.
  - name: files
    description: Manage files.
  - name: search
    description: Manage search.
  - name: articles
    description: Manage articles.
  - name: feedbacks
    description: Manage feedbacks.
  - name: logs
    description: Manage logs.
paths:
  /signup:
    post:
      tags:
        - auth
      summary: Registration in system
      operationId: nucleus.api.v1.auth.signup
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Signup"
  /login:
    post:
      tags:
        - auth
      summary: Return secret string
      description: |
        После успешной регистрации в системе, необходимо авторизоваться через данный эндпоинт,
        с помощью логина и пароля.

        В ответе будет отправлен `access_token`, который необходимо использовать в заголовке
        запроса, в формате `Bearer` - `"Authorization": Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6I
        kpXVCJ9.eyJpc3MiOiJyZWRfbWFjaGluZSIsI5lhdCI6MTYwNzA5OTQ5NSwiZXhwIjoxNjA3MTAzMDk1LCJz
        dWIiOiJmZWJkY2U2Yy01N2M0LTQxZDEtOTQwZC04YjM5YjgyZGQwOTIifQ.8r7rqi75LdpAi2dqhVgCuobFe
        A1PZJKo_4j9iCo54zo`
      operationId: nucleus.api.v1.auth.login
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
      security:
        - basic: []
  /renew:
    put:
      tags:
        - auth
      summary: Return new secret string
      operationId: nucleus.api.v1.auth.renew
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
      security:
        - jwt: []
  /accounts/profile:
    get:
      tags:
        - accounts
      summary: Return user profile
      operationId: nucleus.api.v1.accounts.get_profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
      security:
        - jwt: []
  /users:
    get:
      tags:
        - users
      operationId: nucleus.api.v1.users.get_users_list
      summary: Returns a list of users
      parameters:
        - $ref: "#/components/parameters/include_metadata"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersList"
      security:
        - jwt: []
    post:
      tags:
        - users
      operationId: nucleus.api.v1.users.create_user
      summary: Create user
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserNew"
        required: true
      security:
        - jwt: []
  /users/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - users
      operationId: nucleus.api.v1.users.get_user
      summary: Get user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - jwt: []
    put:
      tags:
        - users
      operationId: nucleus.api.v1.users.update_user
      summary: Update user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      security:
        - jwt: []
    delete:
      tags:
        - users
      operationId: nucleus.api.v1.users.delete_user
      summary: Delete user
      responses:
        '204':
          description: OK
      security:
        - jwt: []
  /users/{id}/block:
    parameters:
      - $ref: "#/components/parameters/id"
    put:
      tags:
        - users
      operationId: nucleus.api.v1.users.block_user
      summary: Заблокировать пользователя
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - jwt: []
  /users/{id}/unblock:
    parameters:
      - $ref: "#/components/parameters/id"
    put:
      tags:
        - users
      operationId: nucleus.api.v1.users.unblock_user
      summary: Разблокировать пользователя
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - jwt: []
  /roles:
    get:
      tags:
        - users
      operationId: nucleus.api.v1.users.get_roles_list
      summary: Returns a list of roles
      parameters:
        - $ref: "#/components/parameters/include_metadata"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RolesList"
      security:
        - jwt: []
    post:
      tags:
        - users
      operationId: nucleus.api.v1.users.create_role
      summary: Create role
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleNew"
        required: true
      security:
        - jwt: []
  /roles/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - users
      operationId: nucleus.api.v1.users.get_role
      summary: Get role
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
      security:
        - jwt: []
    put:
      tags:
        - users
      operationId: nucleus.api.v1.users.update_role
      summary: Update role
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      security:
        - jwt: []
    delete:
      tags:
        - users
      operationId: nucleus.api.v1.users.delete_role
      summary: Delete role
      responses:
        '204':
          description: OK
      security:
        - jwt: []
  /profiles:
    get:
      tags:
        - profiles
      operationId: nucleus.api.v1.profiles.get_profiles_list
      summary: Returns a list of profiles
      parameters:
        - $ref: "#/components/parameters/include_metadata"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfilesList"
      security:
        - jwt: []
    post:
      tags:
        - profiles
      operationId: nucleus.api.v1.profiles.create_profile
      summary: Create profile
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileNew"
        required: true
      security:
        - jwt: []
  /profiles/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - profiles
      operationId: nucleus.api.v1.profiles.get_profile
      summary: Get profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
      security:
        - jwt: []
    put:
      tags:
        - profiles
      operationId: nucleus.api.v1.profiles.update_profile
      summary: Update profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      security:
        - jwt: []
    delete:
      tags:
        - profiles
      operationId: nucleus.api.v1.profiles.delete_profile
      summary: Delete profile
      responses:
        '204':
          description: OK
      security:
        - jwt: []
  /files:
    get:
      tags:
        - files
      summary: Returns a list of files
      operationId: nucleus.api.v1.files.get_files_list
      security:
        - jwt: []
      parameters:
        - $ref: "#/components/parameters/include_metadata"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesList"
    post:
      tags:
        - files
      operationId: nucleus.api.v1.files.upload_file
      summary: Upload files
      security:
        - jwt: []
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        description: File to upload to the server.
  /files/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - files
      summary: Getting information about a file.
      operationId: nucleus.api.v1.files.get_file
      security:
        - jwt: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
    delete:
      tags:
        - files
      operationId: nucleus.api.v1.files.delete_file
      summary: Deleting a file
      security:
        - jwt: []
      responses:
        "204":
          description: OK
  /files/download/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - files
      summary: Download a file
      operationId: nucleus.api.v1.files.download_file
      security:
        - jwt: []
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: string
                format: binary
  /files/download/{id}/thumbnail:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - files
      summary: Download a thumbnail
      operationId: nucleus.api.v1.files.download_thumbnail
      security:
        - jwt: []
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: string
                format: binary
  /files/cdn/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - files
      summary: Эндпоинт для интеграции с CDN
      operationId: nucleus.api.v1.files.cdn_download_file
      security:
        - api_key: []
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: string
                format: binary
  /files/cdn/{id}/thumbnail:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - files
      summary: Эндпоинт для интеграции с CDN
      operationId: nucleus.api.v1.files.cdn_download_thumbnail
      security:
        - api_key: []
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: string
                format: binary
  /search:
    get:
      tags:
        - search
      operationId: nucleus.api.v1.search.get_search_list
      summary: Returns search result
      parameters:
        - $ref: "#/components/parameters/include_metadata"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/scope"
        - $ref: "#/components/parameters/q"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchList"
        '404':
          description: Not Found
      security:
        - jwt: []
  /search/reindex:
    get:
      tags:
        - search
      operationId: nucleus.api.v1.search.search_reindex
      summary: Reindex search index
      parameters:
        - $ref: "#/components/parameters/scope"
      responses:
        '200':
          description: OK
          content:
            "text/plain":
              schema:
                type: string
                example: OK
      security:
        - jwt: []
  /articles:
    get:
      tags:
        - articles
      operationId: nucleus.api.v1.articles.get_articles_list
      summary: Возвращает глобальный список статей
      parameters:
        - $ref: "#/components/parameters/include_metadata"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/author"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArticlesList"
      security:
        - jwt: []
    post:
      tags:
        - articles
      operationId: nucleus.api.v1.articles.create_article
      summary: Создание статьи
      description: |
        Изображения предварительно загружаются через метод `POST /files`,
        полученные `id` файлов, используется здесь.

        При установке параметра `global_name` статья помещается в глобальный
        справочник `GET /directories`.
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArticleNew"
        required: true
      security:
        - jwt: []
  /articles/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - articles
      operationId: nucleus.api.v1.articles.get_article
      summary: Получение статьи
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
    put:
      tags:
        - articles
      operationId: nucleus.api.v1.articles.update_article
      summary: Редактирование статьи
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArticleUpdate"
      security:
        - jwt: []
    delete:
      tags:
        - articles
      operationId: nucleus.api.v1.articles.delete_article
      summary: Удаление статьи
      responses:
        '204':
          description: OK
      security:
        - jwt: []
  /directories:
    get:
      tags:
        - directories
      operationId: nucleus.api.v1.directories.get_directories
      summary: Возвращает глобальный справочник
      description: |
        Глобальный справочник содержит различные фиксированные справочники, например "Категории",
        а также статьи для поддержки статичных страниц и экранов.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Directories"
      security:
        - jwt: []
  /directories/categories:
    get:
      tags:
        - directories
      operationId: nucleus.api.v1.directories.get_categories_list
      summary: Возвращает список категорий
      parameters:
        - $ref: "#/components/parameters/include_metadata"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/content_type"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoriesList"
      security:
        - jwt: []
    post:
      tags:
        - directories
      operationId: nucleus.api.v1.directories.create_category
      summary: Создание категории
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryNew"
        required: true
      security:
        - jwt: []
  /directories/categories/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - directories
      operationId: nucleus.api.v1.directories.get_category
      summary: Получение категории
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
      security:
        - jwt: []
    put:
      tags:
        - directories
      operationId: nucleus.api.v1.directories.update_category
      summary: Редактирование категории
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryUpdate"
      security:
        - jwt: []
    delete:
      tags:
        - directories
      operationId: nucleus.api.v1.directories.delete_category
      summary: Удаление категории
      responses:
        '204':
          description: OK
      security:
        - jwt: []
  /feedbacks:
    get:
      tags:
        - feedbacks
      operationId: nucleus.api.v1.feedbacks.get_feedbacks_list
      summary: Возвращает список вопросов от пользователей
      parameters:
        - $ref: "#/components/parameters/include_metadata"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/category_id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedbacksList"
      security:
        - jwt: []
    post:
      tags:
        - feedbacks
      operationId: nucleus.api.v1.feedbacks.create_feedback
      summary: Создание вопроса для обратной связи
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedbackNew"
        required: true
      security:
        - jwt: []
  /feedbacks/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - feedbacks
      operationId: nucleus.api.v1.feedbacks.get_feedback
      summary: Получение вопроса
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
    put:
      tags:
        - feedbacks
      operationId: nucleus.api.v1.feedbacks.update_feedback
      summary: Редактирование вопроса
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedbackUpdate"
      security:
        - jwt: []
    delete:
      tags:
        - feedbacks
      operationId: nucleus.api.v1.feedbacks.delete_feedback
      summary: Удаление вопроса
      responses:
        '204':
          description: OK
      security:
        - jwt: []
  /logs:
    get:
      tags:
        - logs
      operationId: nucleus.api.v1.logs.get_logs_list
      summary: Возвращает технологический журнал
      parameters:
        - $ref: "#/components/parameters/include_metadata"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/email"
        - $ref: "#/components/parameters/event"
        - $ref: "#/components/parameters/start_datetime_created"
        - $ref: "#/components/parameters/end_datetime_created"
        - $ref: "#/components/parameters/sort_datetime_created"
      security:
        - jwt: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogsItemsList"
components:
  parameters:
    include_metadata:
      in: query
      name: include_metadata
      description: Include metadata object to response
      schema:
        type: string
        enum:
          - enable
    page:
      in: query
      name: page
      description: Page number
      schema:
        type: integer
        minimum: 1
        example: 1
    per_page:
      in: query
      name: per_page
      description: Number of records per page
      schema:
        type: integer
        example: 30
        minimum: 1
        maximum: 100
    id:
      name: id
      in: path
      description: id объекта.
      required: true
      schema:
        type: string
        format: uuid
        example: 789d995f-3aa0-4bf8-a37b-2f2f2086d503
    scope:
      in: query
      name: scope
      description: Search scope.
      required: true
      schema:
        type: string
        enum: [articles]
    q:
      in: query
      name: q
      description: Search query
      required: true
      schema:
        type: string
        example: "Search"
        minLength: 2
        maxLength: 120
    author:
      in: query
      name: author
      description: Имя автора статьи.
      schema:
        type: string
        example: Автор статьи
        minLength: 1
        maxLength: 50
    category_id:
      name: category_id
      in: query
      description: id категории.
      schema:
        type: string
        format: uuid
        example: 789d995f-3aa0-4bf8-a37b-2f2f2086d503
    content_type:
      name: content_type
      in: query
      description: Тип сущности к которому применяется категория.
      schema:
        type: string
        enum: [articles, feedbacks]
    email:
      name: email
      in: query
      description: Имя пользователя.
      schema:
        type: string
        format: email
        example: example_user
    event:
      name: event
      in: query
      description: Идентификатор события лога.
      schema:
        type: string
        enum: [user_signup, user_created, user_blocked, user_unblocked, user_deleted]
    start_datetime_created:
      name: start_datetime_created
      in: query
      description: Начальные дата и время событий лога.
      schema:
        type: string
        format: date-time
        example: 2020-12-13T06:13:00.199194Z
    end_datetime_created:
      name: end_datetime_created
      in: query
      description: Конечные дата и время событий лога.
      schema:
        type: string
        format: date-time
        example: 2020-12-13T06:13:00.199194Z
    sort_datetime_created:
      name: sort_datetime_created
      in: query
      description: Порядок сортировки записей лога по дате создания.
      schema:
        type: string
        enum: [asc, desc]
  schemas:
    ID:
      type: string
      example: 789d995f-3aa0-4bf8-a77b-2f2f20868503
      description: UUID
    MOBILE_PHONE:
      type: string
      minLength: 11
      maxLength: 11
      example: "71234567890"
    DATETIME:
      type: string
      format: date-time
      example: 2020-12-13T06:13:00.199194Z
    GLOBAL_NAME:
      type: string
      description: Уникальное имя статьи для глобального справочника, может содержать только буквы в нижнем регистре, цифры и подчёркивание(_).
      minLength: 1
      maxLength: 120
      pattern: '^[a-z0-9_\-]*$'
      example: "about_app"
    CONTENT_TYPE:
      type: string
      enum: [articles, feedbacks]
    Token:
      type: object
      required:
        - access_token
        - refresh_token
      additionalProperties: false
      properties:
        access_token:
          type: string
          example: "token"
        refresh_token:
          type: string
          example: "token"
    Signup:
      type: object
      required:
        - email
        - password
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
          example: "example_email@example_domain.com"
        password:
          type: string
          example: "secret"
        mobile_phone:
          $ref: "#/components/schemas/MOBILE_PHONE"
    UserNew:
      type: object
      required:
        - email
        - password
        - role
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
          example: "example_email@example_domain.com"
        password:
          type: string
          example: "secret"
        role:
          type: string
          example: "user"
        mobile_phone:
          $ref: "#/components/schemas/MOBILE_PHONE"
    User:
      type: object
      required:
        - id
        - email
        - role
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        email:
          type: string
          format: email
          example: "example_email@example_domain.com"
        role:
          type: string
          example: "user"
        profile_id:
          $ref: "#/components/schemas/ID"
        is_blocked:
          type: boolean
          example: False
        mobile_phone:
          $ref: "#/components/schemas/MOBILE_PHONE"
    UsersList:
      type: object
      required:
        - items
      properties:
        _metadata:
          $ref: '#/components/schemas/Metadata'
        items:
          type: array
          items:
            $ref: "#/components/schemas/User"
    RoleNew:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        name:
          type: string
          example: "user"
        description:
          type: string
          example: "user"
    Role:
      type: object
      required:
        - id
        - name
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
          example: "user"
        description:
          type: string
          example: "user"
    RolesList:
      type: object
      required:
        - items
      properties:
        _metadata:
          $ref: '#/components/schemas/Metadata'
        items:
          type: array
          items:
            $ref: "#/components/schemas/Role"
    ProfileNew:
      type: object
      required:
        - name
        - lastname
      additionalProperties: false
      properties:
        name:
          type: string
          example: "user"
        lastname:
          type: string
          example: "user"
        description:
          type: string
          example: "user"
    Profile:
      type: object
      required:
        - id
        - name
        - lastname
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
          example: "user"
        lastname:
          type: string
          example: "user"
        description:
          type: string
          example: "user"
        user_id:
          $ref: "#/components/schemas/ID"
    ProfilesList:
      type: object
      required:
        - items
      properties:
        _metadata:
          $ref: '#/components/schemas/Metadata'
        items:
          type: array
          items:
            $ref: "#/components/schemas/Profile"
    File:
      type: object
      required:
        - id
        - name
        - length
        - mime_type
        - url
        - thumbnail
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
          format: path
          example: image.png
          description: "File name"
        length:
          type: number
          format: int
          example: 1024
          description: "File size in bytes."
        mime_type:
          type: string
          example: image/png
          description: "MIME type"
        url:
          type: string
          example: 'https://example.com/v1/files/download/12345'
          description: "Link to download the file."
        thumbnail:
          type: string
          example: 'https://example.com/v1/files/download/12345/thumbnail'
          description: "Link to download the thumbnail."
    FilesList:
      type: object
      required:
        - items
      properties:
        _metadata:
          $ref: "#/components/schemas/Metadata"
        items:
          type: array
          items:
            $ref: "#/components/schemas/File"
    ArticleNew:
      type: object
      required:
        - title
        - announce
        - content
        - author
      additionalProperties: false
      properties:
        title:
          type: string
          example: "Ведение шайбы в основной стойке, короткое, на месте"
        content:
          type: string
          example: "Обучение держанию клюшки одной, двумя руками. Ведение без отрыва клюшки от шайбы, по прямой по дуге. Ведение ... "
        announce:
          type: string
          example: "Обучение держанию клюшки одной, двумя руками..."
        main_picture_id:
          $ref: "#/components/schemas/ID"
        main_video_id:
          $ref: "#/components/schemas/ID"
        author:
          type: string
          example: "Кононенко Юрий"
        author_picture_id:
          $ref: "#/components/schemas/ID"
        global_name:
          $ref: "#/components/schemas/GLOBAL_NAME"
    Article:
      type: object
      required:
        - id
        - title
        - announce
        - content
        - author
        - datetime_created
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        title:
          type: string
          example: "Ведение шайбы в основной стойке, короткое, на месте"
        announce:
          type: string
          example: "Обучение держанию клюшки одной, двумя руками..."
        content:
          type: string
          example: "Обучение держанию клюшки одной, двумя руками. Ведение без отрыва клюшки от шайбы, по прямой по дуге. Ведение ... "
        main_picture:
          $ref: "#/components/schemas/File"
        main_video:
          $ref: "#/components/schemas/File"
        author:
          type: string
          example: "Кононенко Юрий"
        author_picture:
          $ref: "#/components/schemas/File"
        datetime_created:
          $ref: "#/components/schemas/DATETIME"
        global_name:
          $ref: "#/components/schemas/GLOBAL_NAME"
    ArticleAnnounce:
      type: object
      required:
        - id
        - title
        - announce
        - author
        - datetime_created
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        title:
          type: string
          example: "Ведение шайбы в основной стойке, короткое, на месте"
        announce:
          type: string
          example: "Обучение держанию клюшки одной, двумя руками..."
        main_picture:
          $ref: "#/components/schemas/File"
        author:
          type: string
          example: "Кононенко Юрий"
        author_picture:
          $ref: "#/components/schemas/File"
        datetime_created:
          $ref: "#/components/schemas/DATETIME"
    ArticleUpdate:
      type: object
      required:
        - id
        - title
        - announce
        - content
        - author
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        title:
          type: string
          example: "Ведение шайбы в основной стойке, короткое, на месте"
        content:
          type: string
          example: "Обучение держанию клюшки одной, двумя руками. Ведение без отрыва клюшки от шайбы, по прямой по дуге. Ведение ... "
        announce:
          type: string
          example: "Обучение держанию клюшки одной, двумя руками..."
        main_picture_id:
          $ref: "#/components/schemas/ID"
        main_video_id:
          $ref: "#/components/schemas/ID"
        author:
          type: string
          example: "Кононенко Юрий"
        author_picture_id:
          $ref: "#/components/schemas/ID"
        global_name:
          $ref: "#/components/schemas/GLOBAL_NAME"
    ArticlesList:
      type: object
      required:
        - items
      properties:
        _metadata:
          $ref: '#/components/schemas/Metadata'
        items:
          type: array
          items:
            $ref: "#/components/schemas/ArticleAnnounce"
    CategoryNew:
      type: object
      required:
        - name
        - content_type
      additionalProperties: false
      properties:
        icon_id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
          example: "Физическая подготовка"
        content_type:
          $ref: "#/components/schemas/CONTENT_TYPE"
    CategoryUpdate:
      type: object
      required:
        - id
        - name
        - content_type
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        icon_id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
          example: "Физическая подготовка"
        content_type:
          $ref: "#/components/schemas/CONTENT_TYPE"
    Category:
      type: object
      required:
        - id
        - name
        - content_type
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        icon:
          $ref: "#/components/schemas/File"
        name:
          type: string
          example: "Физическая подготовка"
        content_type:
          $ref: "#/components/schemas/CONTENT_TYPE"
    CategoriesList:
      type: object
      required:
        - items
      properties:
        _metadata:
          $ref: '#/components/schemas/Metadata'
        items:
          type: array
          items:
            $ref: "#/components/schemas/Category"
    Directories:
      type: object
      properties:
        feedbacks:
          type: object
          required:
            - categories
          properties:
            categories:
              type: array
              items:
                $ref: "#/components/schemas/Category"
        articles:
          type: object
          description: |
            Список статей которые используются для формирования статичной
            информации, например "О приложении".
    FeedbackNew:
      type: object
      required:
        - email
        - title
        - message
        - category_id
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
          example: email@example.com
        mobile_phone:
          type: string
          minLength: 11
          maxLength: 11
          example: "71234567890"
        title:
          type: string
          example: "Не отображаются результаты опросов"
        message:
          type: string
          example: "Не отображаются результаты опросов для незарегистрированного пользователя."
        category_id:
          $ref: "#/components/schemas/ID"
    Feedback:
      type: object
      required:
        - id
        - email
        - title
        - message
        - category_id
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        email:
          type: string
          format: email
          example: email@example.com
        mobile_phone:
          type: string
          minLength: 11
          maxLength: 11
          example: "71234567890"
        title:
          type: string
          example: "Не отображаются результаты опросов"
        message:
          type: string
          example: "Не отображаются результаты опросов для незарегистрированного пользователя."
        category_id:
          $ref: "#/components/schemas/ID"
    FeedbackUpdate:
      type: object
      required:
        - id
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        email:
          type: string
          format: email
          example: email@example.com
        mobile_phone:
          type: string
          minLength: 11
          maxLength: 11
          example: "71234567890"
        title:
          type: string
          example: "Не отображаются результаты опросов"
        message:
          type: string
          example: "Не отображаются результаты опросов для незарегистрированного пользователя."
        category_id:
          $ref: "#/components/schemas/ID"
    FeedbacksList:
      type: object
      required:
        - items
      properties:
        _metadata:
          $ref: '#/components/schemas/Metadata'
        items:
          type: array
          items:
            $ref: "#/components/schemas/Feedback"
    LogItem:
      type: object
      required:
        - id
        - email
        - event
        - message
        - datetime_created
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ID"
        email:
          type: string
          format: email
          example: "example_email@example_domain.com"
        event:
          type: string
          example: "user_created"
        message:
          type: string
          example: "Пользователь создан"
        description:
          type: string
          example: "Пользователь создан автоматически."
        datetime_created:
          $ref: "#/components/schemas/DATETIME"
    LogsItemsList:
      type: object
      required:
        - items
      properties:
        _metadata:
          $ref: '#/components/schemas/Metadata'
        items:
          type: array
          items:
            $ref: "#/components/schemas/LogItem"
    Search:
      type: object
      required:
        - id
      properties:
        id:
          $ref: "#/components/schemas/ID"
    SearchList:
      type: object
      required:
        - items
      properties:
        _metadata:
          $ref: "#/components/schemas/Metadata"
        items:
          type: array
          items:
            $ref: "#/components/schemas/Search"
    Pagination:
      type: object
      required:
        - page
        - per_page
        - pages
        - items
      properties:
        page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 30
        pages:
          type: integer
          example: 1
        items:
          type: integer
          example: 1
    Metadata:
      type: object
      required:
        - pagination
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
  securitySchemes:
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: nucleus.api.v1.auth.basic_auth
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: nucleus.api.v1.auth.decode_token
    api_key:
      type: apiKey
      name: "X-CDN-Secret"
      in: header
      x-apikeyInfoFunc: nucleus.api.v1.auth.apikey_auth
